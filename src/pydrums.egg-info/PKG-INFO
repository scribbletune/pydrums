Metadata-Version: 2.4
Name: pydrums
Version: 0.1.0
Summary: AI-powered drum pattern generation and MIDI conversion
Author-email: Your Name <your.email@example.com>
Project-URL: Homepage, https://github.com/yourusername/pydrums
Project-URL: Repository, https://github.com/yourusername/pydrums
Project-URL: Documentation, https://github.com/yourusername/pydrums#readme
Keywords: music,drums,ai,midi,patterns,machine-learning
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Musicians
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Multimedia :: Sound/Audio :: MIDI
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: ollama>=0.3.0
Requires-Dist: mido>=1.3.0
Requires-Dist: pretty_midi>=0.2.10
Requires-Dist: requests>=2.31.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: flask>=2.3.0
Requires-Dist: flask-cors>=4.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Provides-Extra: ml
Requires-Dist: torch>=2.0.0; extra == "ml"
Requires-Dist: transformers>=4.30.0; extra == "ml"
Requires-Dist: datasets>=2.14.0; extra == "ml"
Provides-Extra: audio
Requires-Dist: librosa>=0.10.0; extra == "audio"
Requires-Dist: soundfile>=0.12.0; extra == "audio"
Requires-Dist: music21>=9.1.0; extra == "audio"
Provides-Extra: docs
Requires-Dist: PyPDF2>=3.0.0; extra == "docs"
Requires-Dist: pytesseract>=0.3.10; extra == "docs"
Requires-Dist: opencv-python>=4.8.0; extra == "docs"

# PyDrums 🥁

**AI-powered drum pattern generation and MIDI conversion**

PyDrums is a comprehensive Python toolkit that uses AI (via Ollama) to generate professional drum patterns from text descriptions and convert them to MIDI files. Perfect for musicians, producers, and developers working with rhythm and percussion.

## ✨ Features

- 🤖 **AI Pattern Generation**: Uses few-shot learning with Ollama to generate drum patterns from natural language
- 🎼 **MIDI Conversion**: Convert patterns to standard MIDI files compatible with any DAW
- 📚 **Professional Training Data**: Built on 200+ professional drum patterns across 15+ musical styles
- 🎵 **Musical Notation**: Uses industry-standard 6-token notation system (x, -, R, _, [, ])
- 🔄 **Multiple Data Sources**: Load patterns from GitHub repositories and custom JSON sources
- 🎮 **Interactive Mode**: Real-time pattern generation with immediate feedback
- 🛠️ **CLI Tool**: Command-line interface for batch processing and automation

## 🚀 Quick Start

### Installation

```bash
# Clone the repository
git clone https://github.com/yourusername/pydrums.git
cd pydrums

# Create virtual environment
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate

# Install dependencies
pip install -e .
```

### Prerequisites

1. **Install Ollama**: Download from [ollama.ai](https://ollama.ai)
2. **Pull a model**: `ollama pull llama3.1:latest`

### Basic Usage

```bash
# 1. Setup training data
pydrums setup-data

# 2. Generate a pattern
pydrums generate -d "Create a funky rock beat" --to-midi

# 3. Interactive mode
pydrums generate --interactive

# 4. Convert pattern string to MIDI
pydrums convert -p "ch: x-x-x-x-; sd: ----x---; bd: x-----x-"
```

## 📖 Documentation

### Pattern Notation

PyDrums uses a 6-token notation system:

- `x` = Hit/strike the drum
- `-` = Rest/silence
- `R` = Roll (extended sound)
- `_` = Ghost note (quiet hit)
- `[` = Flam start (grace note)
- `]` = Flam end

### Drum Abbreviations

- `ch` = Closed Hi-Hat
- `oh` = Open Hi-Hat  
- `sd` = Snare Drum
- `bd` = Bass Drum
- `hh` = Hi-Hat Pedal
- `cc` = Crash Cymbal
- `rc` = Ride Cymbal
- `ht` = High Tom
- `mt` = Mid Tom
- `lt` = Low Tom

### Python API

```python
from pydrums import PatternGenerator, MidiConverter, DataLoader

# Generate patterns
generator = PatternGenerator()
pattern = generator.generate_pattern("Create a jazz shuffle")

# Convert to MIDI
converter = MidiConverter()
midi_file = converter.pattern_to_midi(pattern, tempo_bpm=140)

# Load additional data
loader = DataLoader()
patterns = loader.load_github_json_patterns()
```

## 🎯 Use Cases

- **Music Production**: Generate drum patterns for songs and beats
- **Practice**: Create backing tracks for musicians
- **Game Development**: Generate dynamic music for games
- **Music Education**: Learn about rhythm and pattern construction
- **AI Research**: Experiment with music generation and few-shot learning

## 🔧 Configuration

### Adding Your Own Data Sources

```bash
# Add additional JSON pattern source
pydrums setup-data --additional-url "https://api.github.com/repos/user/repo/contents/patterns" --additional-name "custom_patterns"
```

### Model Selection

```bash
# Use different Ollama model
pydrums generate -d "rock beat" -m "mistral:latest"
```

### Advanced Options

```python
# Custom generation parameters
pattern = generator.generate_pattern(
    "Create a complex progressive pattern",
    num_examples=5,        # More examples for better context
    temperature=0.8,       # Higher creativity
    style_hint="progressive"  # Guide style selection
)

# MIDI with custom settings
midi_file = converter.pattern_to_midi(
    pattern,
    tempo_bpm=140,
    loop_count=8,          # 8 repetitions
    ticks_per_beat=960     # Higher resolution
)
```

## 📊 Training Data

PyDrums includes professionally curated drum patterns:

- **200+ Patterns**: Across rock, funk, jazz, latin, pop, and more
- **15+ Styles**: From basic rock to complex progressive patterns
- **Professional Quality**: Sourced from established drum machine pattern libraries
- **JSON Format**: Structured data for reliable AI training

### Data Sources

1. **Primary**: [stephenhandley/DrumMachinePatterns](https://github.com/stephenhandley/DrumMachinePatterns) - 200 patterns in perfect JSON format
2. **Secondary**: [montoyamoraga/drum-machine-patterns](https://github.com/montoyamoraga/drum-machine-patterns) - Additional patterns in markdown format

## 🧠 How It Works

PyDrums uses **few-shot learning** rather than traditional model training:

1. **Context Loading**: Selects relevant example patterns based on your description
2. **Prompt Engineering**: Creates structured prompts with notation guides and examples  
3. **AI Generation**: Uses Ollama to generate new patterns following the established format
4. **Validation**: Checks output format and provides fallbacks if needed
5. **MIDI Conversion**: Converts text patterns to standard MIDI using General MIDI mapping

This approach is:
- ⚡ **Fast**: No training time required
- 🎯 **Accurate**: Uses proven professional patterns as examples
- 🔄 **Adaptable**: Easy to add new styles and patterns
- 💻 **Local**: Runs entirely on your machine with Ollama

## 🛠️ Development

### Project Structure

```
pydrums/
├── src/pydrums/           # Main package
│   ├── __init__.py
│   ├── pattern_generator.py    # AI pattern generation
│   ├── midi_converter.py       # MIDI file creation
│   ├── data_loader.py          # Data loading and processing
│   └── cli.py                  # Command-line interface
├── data/                       # Training data
├── midi_output/               # Generated MIDI files
├── examples/                  # Usage examples
├── tests/                     # Unit tests
└── requirements.txt           # Dependencies
```

### Running Tests

```bash
pip install -e ".[dev]"
pytest tests/
```

### Code Quality

```bash
# Format code
black src/ tests/

# Lint code  
flake8 src/ tests/

# Type checking
mypy src/
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Add tests for new functionality
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feature/amazing-feature`)
7. Open a Pull Request

### Adding New Pattern Sources

To add a new pattern data source:

1. Implement loading logic in `DataLoader.load_additional_json_source()`
2. Add conversion logic for the specific format
3. Update the CLI to accept the new source
4. Add tests for the new functionality

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- [Ollama](https://ollama.ai) for local AI capabilities
- [stephenhandley/DrumMachinePatterns](https://github.com/stephenhandley/DrumMachinePatterns) for excellent training data
- [montoyamoraga/drum-machine-patterns](https://github.com/montoyamoraga/drum-machine-patterns) for additional pattern resources
- The music production community for feedback and inspiration

## 📞 Support

- 🐛 [Report bugs](https://github.com/yourusername/pydrums/issues)
- 💡 [Request features](https://github.com/yourusername/pydrums/issues)
- 📧 [Email support](mailto:your.email@example.com)
- 💬 [Community discussions](https://github.com/yourusername/pydrums/discussions)

---

**Happy drumming! 🥁🎵**
